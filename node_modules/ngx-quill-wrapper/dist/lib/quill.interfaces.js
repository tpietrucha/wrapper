/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export var QUILL_CONFIG = new InjectionToken('QUILL_CONFIG');
/**
 * @record
 */
export function QuillConfigInterface() { }
if (false) {
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.theme;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.debug;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.strict;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.formats;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.modules;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.readOnly;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.placeholder;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.bounds;
    /** @type {?|undefined} */
    QuillConfigInterface.prototype.scrollingContainer;
}
/**
 * @record
 */
export function QuillModulesInterface() { }
var QuillConfig = /** @class */ (function () {
    function QuillConfig(config) {
        if (config === void 0) { config = {}; }
        this.assign(config);
    }
    /**
     * @param {?=} config
     * @param {?=} target
     * @return {?}
     */
    QuillConfig.prototype.assign = /**
     * @param {?=} config
     * @param {?=} target
     * @return {?}
     */
    function (config, target) {
        if (config === void 0) { config = {}; }
        target = target || this;
        for (var key in config) {
            if (config[key] != null && !Array.isArray(config[key]) && typeof config[key] === 'object' &&
                (typeof HTMLElement === 'undefined' || !(config[key] instanceof HTMLElement))) {
                target[key] = {};
                this.assign(config[key], target[key]);
            }
            else {
                target[key] = config[key];
            }
        }
    };
    return QuillConfig;
}());
export { QuillConfig };
if (false) {
    /** @type {?} */
    QuillConfig.prototype.theme;
    /** @type {?} */
    QuillConfig.prototype.debug;
    /** @type {?} */
    QuillConfig.prototype.strict;
    /** @type {?} */
    QuillConfig.prototype.formats;
    /** @type {?} */
    QuillConfig.prototype.modules;
    /** @type {?} */
    QuillConfig.prototype.readOnly;
    /** @type {?} */
    QuillConfig.prototype.placeholder;
    /** @type {?} */
    QuillConfig.prototype.bounds;
    /** @type {?} */
    QuillConfig.prototype.scrollingContainer;
}
//# sourceMappingURL=quill.interfaces.js.map