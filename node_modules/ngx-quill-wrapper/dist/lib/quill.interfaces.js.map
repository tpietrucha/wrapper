{"version":3,"file":"quill.interfaces.js","sourceRoot":"","sources":["../../src/lib/quill.interfaces.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;;AAE/C,MAAM,KAAO,YAAY,GAAG,IAAI,cAAc,CAAuB,cAAc,CAAC;;;;AAEpF,0CAcC;;;IAbC,qCAAe;;IAEf,qCAAe;;IACf,sCAAiB;;IAEjB,uCAAmB;;IACnB,uCAAc;;IAEd,wCAAmB;;IACnB,2CAAqB;;IAErB,sCAA8B;;IAC9B,kDAAyC;;;;;AAG3C,2CAEC;AAED;IAeE,qBAAY,MAAiC;QAAjC,uBAAA,EAAA,WAAiC;QAC3C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;;;;;;IAED,4BAAM;;;;;IAAN,UAAO,MAAuC,EAAE,MAAY;QAArD,uBAAA,EAAA,WAAuC;QAC5C,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC;QAExB,KAAK,IAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,QAAQ;gBACtF,CAAC,OAAO,WAAW,KAAK,WAAW,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,WAAW,CAAC,CAAC,EAChF;gBACE,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAEjB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aACvC;iBAAM;gBACL,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;aAC3B;SACF;IACH,CAAC;IACH,kBAAC;AAAD,CAAC,AAlCD,IAkCC;;;;IAjCC,4BAAe;;IAEf,4BAAe;;IACf,6BAAiB;;IAEjB,8BAAmB;;IACnB,8BAAc;;IAEd,+BAAmB;;IACnB,kCAAqB;;IAErB,6BAA8B;;IAC9B,yCAA0C","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const QUILL_CONFIG = new InjectionToken<QuillConfigInterface>('QUILL_CONFIG');\n\nexport interface QuillConfigInterface {\n  theme?: string,\n\n  debug?: string,\n  strict?: boolean,\n\n  formats?: string[],\n  modules?: any,\n\n  readOnly?: boolean,\n  placeholder?: string,\n\n  bounds?: string | HTMLElement,\n  scrollingContainer?: string | HTMLElement\n}\n\nexport interface QuillModulesInterface {\n  [path: string]: any\n}\n\nexport class QuillConfig implements QuillConfigInterface {\n  theme?: string;\n\n  debug?: string;\n  strict?: boolean;\n\n  formats?: string[];\n  modules?: any;\n\n  readOnly?: boolean;\n  placeholder?: string;\n\n  bounds?: string | HTMLElement;\n  scrollingContainer?: string | HTMLElement;\n\n  constructor(config: QuillConfigInterface = {}) {\n    this.assign(config);\n  }\n\n  assign(config: QuillConfigInterface | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !Array.isArray(config[key]) && typeof config[key] === 'object' &&\n         (typeof HTMLElement === 'undefined' || !(config[key] instanceof HTMLElement)))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\n"]}