/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import Quill from 'quill';
import { Directive, Optional, Inject, Input, Output, EventEmitter, NgZone, ElementRef, KeyValueDiffers } from '@angular/core';
import { QuillService } from './quill.service';
import { QUILL_CONFIG, QuillConfig } from './quill.interfaces';
var QuillDirective = /** @class */ (function () {
    function QuillDirective(zone, elementRef, differs, service, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.service = service;
        this.defaults = defaults;
        this.instance = null;
        this.selection = null;
        this.hasFocus = false;
        this.showToolbar = false;
        this.configDiff = null;
        this.defaultToolbarConfig = [
            ['bold', 'italic', 'underline', 'strike'],
            ['blockquote', 'code-block'],
            [{ 'header': 1 }, { 'header': 2 }],
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],
            [{ 'indent': '-1' }, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }],
            [{ 'size': ['small', false, 'large', 'huge'] }],
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'font': [] }],
            [{ 'align': [] }],
            ['clean']
        ];
        this.disabled = false;
        this.autoToolbar = false;
        this.realToolbar = false;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.editorCreate = new EventEmitter();
        this.contentChange = new EventEmitter();
        this.selectionChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    QuillDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = new QuillConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (this.disabled) {
            params.readOnly = true;
            params.modules = { toolbar: false }; // Disable toolbar
        }
        else {
            params.theme = params.theme || 'snow';
            params.modules = params.modules || { toolbar: true };
            params.modules.toolbar = params.modules.toolbar || false;
            if (params.modules.toolbar) {
                if (typeof params.modules.toolbar !== 'object' ||
                    params.modules.toolbar.container === undefined) {
                    params.modules.toolbar = {
                        container: (params.modules.toolbar === true) ?
                            this.defaultToolbarConfig : params.modules.toolbar
                    };
                }
                if (this.autoToolbar && !this.showToolbar) {
                    params.modules.toolbar = false;
                }
                else if (this.autoToolbar || !this.realToolbar) {
                    /** @type {?} */
                    var toolbar_1 = params.modules.toolbar.container;
                    params.modules.toolbar.container = this.service.getToolbar(toolbar_1);
                }
            }
        }
        this.zone.runOutsideAngular(function () {
            if (_this.modules) {
                Object.keys(_this.modules).forEach(function (path) {
                    if (_this.modules && _this.modules[path]) {
                        Quill.register(path, _this.modules[path]);
                    }
                });
            }
            _this.instance = new Quill(_this.elementRef.nativeElement, params);
            if (!params.readOnly) {
                _this.instance.enable();
            }
            else {
                _this.instance.disable();
            }
            if (_this.editorCreate.observers.length) {
                _this.editorCreate.emit(_this.instance);
            }
        });
        // Reset selection after onDestroy if available
        if (this.instance && this.selection && this.hasFocus === true) {
            this.instance.setSelection(this.selection, 'silent');
            this.instance.focus();
        }
        if (this.instance) {
            // Add handling of text / content change events
            this.instance.on('text-change', function (delta, oldDelta, source) {
                /** @type {?} */
                var html = _this.elementRef.nativeElement.children[0].innerHTML;
                _this.zone.runOutsideAngular(function () {
                    if (_this.instance && _this.contentChange.observers.length) {
                        _this.contentChange.emit({
                            editor: _this.instance,
                            html: (html === '<p><br></p>') ? null : html,
                            text: _this.instance.getText(),
                            delta: delta,
                            oldDelta: oldDelta,
                            source: source
                        });
                    }
                });
            });
            // Add handling of blur / focus and selection events
            this.instance.on('selection-change', function (range, oldRange, source) {
                /** @type {?} */
                var resetToolbar = false;
                if (!range && _this.hasFocus) {
                    _this.hasFocus = false;
                    _this.blur.emit(_this.instance);
                    if (_this.autoToolbar && _this.showToolbar) {
                        _this.showToolbar = false;
                    }
                }
                else if (range && !_this.hasFocus) {
                    _this.hasFocus = true;
                    _this.focus.emit(_this.instance);
                    // Check if reset is needed to update toolbar
                    if (_this.autoToolbar && !_this.showToolbar) {
                        resetToolbar = true;
                        _this.showToolbar = true;
                    }
                }
                else {
                    _this.zone.runOutsideAngular(function () {
                        if (_this.instance && _this.selectionChange.observers.length) {
                            _this.selectionChange.emit({
                                editor: _this.instance,
                                range: range,
                                oldRange: oldRange,
                                source: source
                            });
                        }
                    });
                }
                if (resetToolbar) {
                    setTimeout(function () {
                        _this.ngOnDestroy();
                        _this.ngOnInit();
                    }, 0);
                }
            });
        }
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            /** @type {?} */
            var toolbar_2 = this.instance.getModule('toolbar');
            this.selection = this.instance.getSelection();
            if (typeof HTMLElement !== 'undefined' &&
                toolbar_2 && toolbar_2.options && toolbar_2.container &&
                !(toolbar_2.options.container instanceof HTMLElement)) {
                toolbar_2.container.remove();
            }
            if (this.elementRef && this.elementRef.nativeElement) {
                /** @type {?} */
                var preview = this.elementRef.nativeElement.querySelector('.ql-preview');
                if (preview) {
                    preview.innerHTML = '';
                }
            }
            delete this.instance;
            this.instance = null;
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.configDiff) {
            /** @type {?} */
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    QuillDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.zone.runOutsideAngular(function () {
                    _this.ngOnDestroy();
                    _this.ngOnInit();
                });
            }
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.quill = /**
     * @return {?}
     */
    function () {
        return this.instance;
    };
    /**
     * @param {?=} source
     * @return {?}
     */
    QuillDirective.prototype.clear = /**
     * @param {?=} source
     * @return {?}
     */
    function (source) {
        if (this.instance) {
            this.instance.deleteText(0, this.instance.getLength(), source);
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.getValue = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            return this.instance.getText();
        }
    };
    /**
     * @param {?} value
     * @param {?=} source
     * @return {?}
     */
    QuillDirective.prototype.setValue = /**
     * @param {?} value
     * @param {?=} source
     * @return {?}
     */
    function (value, source) {
        if (this.instance) {
            this.clear(source);
            this.instance.clipboard.dangerouslyPasteHTML(value, source);
            this.instance.setSelection(this.instance.getLength(), 1);
        }
    };
    QuillDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[quill]',
                    exportAs: 'ngxQuill'
                },] }
    ];
    /** @nocollapse */
    QuillDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: QuillService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [QUILL_CONFIG,] }] }
    ]; };
    QuillDirective.propDecorators = {
        disabled: [{ type: Input }],
        autoToolbar: [{ type: Input }],
        realToolbar: [{ type: Input }],
        config: [{ type: Input, args: ['quill',] }],
        modules: [{ type: Input, args: ['modules',] }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        editorCreate: [{ type: Output }],
        contentChange: [{ type: Output }],
        selectionChange: [{ type: Output }]
    };
    return QuillDirective;
}());
export { QuillDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.selection;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.hasFocus;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.showToolbar;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.configDiff;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.defaultToolbarConfig;
    /** @type {?} */
    QuillDirective.prototype.disabled;
    /** @type {?} */
    QuillDirective.prototype.autoToolbar;
    /** @type {?} */
    QuillDirective.prototype.realToolbar;
    /** @type {?} */
    QuillDirective.prototype.config;
    /** @type {?} */
    QuillDirective.prototype.modules;
    /** @type {?} */
    QuillDirective.prototype.blur;
    /** @type {?} */
    QuillDirective.prototype.focus;
    /** @type {?} */
    QuillDirective.prototype.editorCreate;
    /** @type {?} */
    QuillDirective.prototype.contentChange;
    /** @type {?} */
    QuillDirective.prototype.selectionChange;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    QuillDirective.prototype.defaults;
}
//# sourceMappingURL=quill.directive.js.map