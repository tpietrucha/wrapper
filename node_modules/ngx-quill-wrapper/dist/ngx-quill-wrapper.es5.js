import { Injectable, InjectionToken, Directive, NgZone, ElementRef, KeyValueDiffers, Optional, Inject, Input, Output, EventEmitter, Component, ViewEncapsulation, HostBinding, ViewChild, NgModule } from '@angular/core';
import Quill from 'quill';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var QuillService = /** @class */ (function () {
    function QuillService() {
        this.toolbar = null;
    }
    /**
     * @param {?} toolbarConfig
     * @return {?}
     */
    QuillService.prototype.getToolbar = /**
     * @param {?} toolbarConfig
     * @return {?}
     */
    function (toolbarConfig) {
        /** @type {?} */
        var toolbar = toolbarConfig;
        if (typeof toolbarConfig === 'string') {
            toolbar = document.querySelector(toolbarConfig);
        }
        if (typeof HTMLElement !== 'undefined' && toolbar instanceof HTMLElement) {
            if (!this.toolbar) {
                this.toolbar = toolbar;
            }
            /** @type {?} */
            var clone = this.toolbar.cloneNode(true);
            if (toolbar.parentNode) {
                toolbar.parentNode.replaceChild(clone, toolbar);
            }
            return clone;
        }
        return toolbarConfig;
    };
    QuillService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    QuillService.ctorParameters = function () { return []; };
    return QuillService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var QUILL_CONFIG = new InjectionToken('QUILL_CONFIG');
var QuillConfig = /** @class */ (function () {
    function QuillConfig(config) {
        if (config === void 0) { config = {}; }
        this.assign(config);
    }
    /**
     * @param {?=} config
     * @param {?=} target
     * @return {?}
     */
    QuillConfig.prototype.assign = /**
     * @param {?=} config
     * @param {?=} target
     * @return {?}
     */
    function (config, target) {
        if (config === void 0) { config = {}; }
        target = target || this;
        for (var key in config) {
            if (config[key] != null && !Array.isArray(config[key]) && typeof config[key] === 'object' &&
                (typeof HTMLElement === 'undefined' || !(config[key] instanceof HTMLElement))) {
                target[key] = {};
                this.assign(config[key], target[key]);
            }
            else {
                target[key] = config[key];
            }
        }
    };
    return QuillConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var QuillDirective = /** @class */ (function () {
    function QuillDirective(zone, elementRef, differs, service, defaults) {
        this.zone = zone;
        this.elementRef = elementRef;
        this.differs = differs;
        this.service = service;
        this.defaults = defaults;
        this.instance = null;
        this.selection = null;
        this.hasFocus = false;
        this.showToolbar = false;
        this.configDiff = null;
        this.defaultToolbarConfig = [
            ['bold', 'italic', 'underline', 'strike'],
            ['blockquote', 'code-block'],
            [{ 'header': 1 }, { 'header': 2 }],
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],
            [{ 'indent': '-1' }, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }],
            [{ 'size': ['small', false, 'large', 'huge'] }],
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'font': [] }],
            [{ 'align': [] }],
            ['clean']
        ];
        this.disabled = false;
        this.autoToolbar = false;
        this.realToolbar = false;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.editorCreate = new EventEmitter();
        this.contentChange = new EventEmitter();
        this.selectionChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    QuillDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = new QuillConfig(this.defaults);
        params.assign(this.config); // Custom configuration
        if (this.disabled) {
            params.readOnly = true;
            params.modules = { toolbar: false }; // Disable toolbar
        }
        else {
            params.theme = params.theme || 'snow';
            params.modules = params.modules || { toolbar: true };
            params.modules.toolbar = params.modules.toolbar || false;
            if (params.modules.toolbar) {
                if (typeof params.modules.toolbar !== 'object' ||
                    params.modules.toolbar.container === undefined) {
                    params.modules.toolbar = {
                        container: (params.modules.toolbar === true) ?
                            this.defaultToolbarConfig : params.modules.toolbar
                    };
                }
                if (this.autoToolbar && !this.showToolbar) {
                    params.modules.toolbar = false;
                }
                else if (this.autoToolbar || !this.realToolbar) {
                    /** @type {?} */
                    var toolbar_1 = params.modules.toolbar.container;
                    params.modules.toolbar.container = this.service.getToolbar(toolbar_1);
                }
            }
        }
        this.zone.runOutsideAngular(function () {
            if (_this.modules) {
                Object.keys(_this.modules).forEach(function (path) {
                    if (_this.modules && _this.modules[path]) {
                        Quill.register(path, _this.modules[path]);
                    }
                });
            }
            _this.instance = new Quill(_this.elementRef.nativeElement, params);
            if (!params.readOnly) {
                _this.instance.enable();
            }
            else {
                _this.instance.disable();
            }
            if (_this.editorCreate.observers.length) {
                _this.editorCreate.emit(_this.instance);
            }
        });
        // Reset selection after onDestroy if available
        if (this.instance && this.selection && this.hasFocus === true) {
            this.instance.setSelection(this.selection, 'silent');
            this.instance.focus();
        }
        if (this.instance) {
            // Add handling of text / content change events
            this.instance.on('text-change', function (delta, oldDelta, source) {
                /** @type {?} */
                var html = _this.elementRef.nativeElement.children[0].innerHTML;
                _this.zone.runOutsideAngular(function () {
                    if (_this.instance && _this.contentChange.observers.length) {
                        _this.contentChange.emit({
                            editor: _this.instance,
                            html: (html === '<p><br></p>') ? null : html,
                            text: _this.instance.getText(),
                            delta: delta,
                            oldDelta: oldDelta,
                            source: source
                        });
                    }
                });
            });
            // Add handling of blur / focus and selection events
            this.instance.on('selection-change', function (range, oldRange, source) {
                /** @type {?} */
                var resetToolbar = false;
                if (!range && _this.hasFocus) {
                    _this.hasFocus = false;
                    _this.blur.emit(_this.instance);
                    if (_this.autoToolbar && _this.showToolbar) {
                        _this.showToolbar = false;
                    }
                }
                else if (range && !_this.hasFocus) {
                    _this.hasFocus = true;
                    _this.focus.emit(_this.instance);
                    // Check if reset is needed to update toolbar
                    if (_this.autoToolbar && !_this.showToolbar) {
                        resetToolbar = true;
                        _this.showToolbar = true;
                    }
                }
                else {
                    _this.zone.runOutsideAngular(function () {
                        if (_this.instance && _this.selectionChange.observers.length) {
                            _this.selectionChange.emit({
                                editor: _this.instance,
                                range: range,
                                oldRange: oldRange,
                                source: source
                            });
                        }
                    });
                }
                if (resetToolbar) {
                    setTimeout(function () {
                        _this.ngOnDestroy();
                        _this.ngOnInit();
                    }, 0);
                }
            });
        }
        if (!this.configDiff) {
            this.configDiff = this.differs.find(this.config || {}).create();
            this.configDiff.diff(this.config || {});
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            /** @type {?} */
            var toolbar_2 = this.instance.getModule('toolbar');
            this.selection = this.instance.getSelection();
            if (typeof HTMLElement !== 'undefined' &&
                toolbar_2 && toolbar_2.options && toolbar_2.container &&
                !(toolbar_2.options.container instanceof HTMLElement)) {
                toolbar_2.container.remove();
            }
            if (this.elementRef && this.elementRef.nativeElement) {
                /** @type {?} */
                var preview = this.elementRef.nativeElement.querySelector('.ql-preview');
                if (preview) {
                    preview.innerHTML = '';
                }
            }
            delete this.instance;
            this.instance = null;
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.configDiff) {
            /** @type {?} */
            var changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    QuillDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.instance && changes['disabled']) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                this.zone.runOutsideAngular(function () {
                    _this.ngOnDestroy();
                    _this.ngOnInit();
                });
            }
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.quill = /**
     * @return {?}
     */
    function () {
        return this.instance;
    };
    /**
     * @param {?=} source
     * @return {?}
     */
    QuillDirective.prototype.clear = /**
     * @param {?=} source
     * @return {?}
     */
    function (source) {
        if (this.instance) {
            this.instance.deleteText(0, this.instance.getLength(), source);
        }
    };
    /**
     * @return {?}
     */
    QuillDirective.prototype.getValue = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            return this.instance.getText();
        }
    };
    /**
     * @param {?} value
     * @param {?=} source
     * @return {?}
     */
    QuillDirective.prototype.setValue = /**
     * @param {?} value
     * @param {?=} source
     * @return {?}
     */
    function (value, source) {
        if (this.instance) {
            this.clear(source);
            this.instance.clipboard.dangerouslyPasteHTML(value, source);
            this.instance.setSelection(this.instance.getLength(), 1);
        }
    };
    QuillDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[quill]',
                    exportAs: 'ngxQuill'
                },] }
    ];
    /** @nocollapse */
    QuillDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: KeyValueDiffers },
        { type: QuillService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [QUILL_CONFIG,] }] }
    ]; };
    QuillDirective.propDecorators = {
        disabled: [{ type: Input }],
        autoToolbar: [{ type: Input }],
        realToolbar: [{ type: Input }],
        config: [{ type: Input, args: ['quill',] }],
        modules: [{ type: Input, args: ['modules',] }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        editorCreate: [{ type: Output }],
        contentChange: [{ type: Output }],
        selectionChange: [{ type: Output }]
    };
    return QuillDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var QuillComponent = /** @class */ (function () {
    function QuillComponent() {
        this.content = null;
        this.disabled = false;
        this.autoToolbar = false;
        this.realToolbar = false;
        this.useQuillClass = true;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.editorCreate = new EventEmitter();
        this.contentChange = new EventEmitter();
        this.selectionChange = new EventEmitter();
    }
    Object.defineProperty(QuillComponent.prototype, "value", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setContent(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    QuillComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.content != null) {
            this.setContent(this.content, true);
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} force
     * @return {?}
     */
    QuillComponent.prototype.setContent = /**
     * @private
     * @param {?} value
     * @param {?=} force
     * @return {?}
     */
    function (value, force) {
        if (force || value !== this.content) {
            if (this.directiveRef) {
                this.directiveRef.setValue(value, 'silent');
            }
            this.content = value;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    QuillComponent.prototype.onContentChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.content = event.html;
        this.contentChange.emit(event);
        this.valueChange.emit(event.html);
    };
    QuillComponent.decorators = [
        { type: Component, args: [{
                    selector: 'quill',
                    exportAs: 'ngxQuill',
                    template: "<div [quill]=\"config\" [modules]=\"modules\" [disabled]=\"disabled\" [autoToolbar]=\"autoToolbar\" [realToolbar]=\"realToolbar\" (blur)=\"blur.emit($event)\" (focus)=\"focus.emit($event)\" (editorCreate)=\"editorCreate.emit($event)\" (contentChange)=\"onContentChange($event)\" (selectionChange)=\"selectionChange.emit($event)\">\n  <ng-content select=\"[quillToolbar]\"></ng-content>\n\n  <ng-content select=\"[quillContent]\"></ng-content>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["@import url('https://cdn.quilljs.com/1.3.5/quill.snow.css');\n@import url('https://cdn.quilljs.com/1.3.5/quill.bubble.css');\n\n.quill {\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n\n.quill > .ql-toolbar > .ql-formats {\n  margin-right: 12px;\n  margin-left: 0;\n}\n\n.quill > .ql-toolbar + .ql-container {\n  height: calc(100% - 42px);\n}\n\n.quill[fxflex] {\n  display: flex;\n  flex-direction: inherit;\n  align-items: inherit;\n  min-width: 0;\n  min-height: 0;\n\n  -webkit-box-direction: inherit;\n  -webkit-box-orient: inherit;\n}\n\n.quill[fxflex] > .ql-toolbar {\n  flex: 0 0 auto;\n\n  -webkit-box-flex: 0;\n}\n\n.quill[fxflex] > .ql-container {\n  flex: 1 1 auto;\n  min-width: 0;\n  min-height: 0;\n\n  -webkit-box-flex: 1;\n}\n"]
                }] }
    ];
    /** @nocollapse */
    QuillComponent.ctorParameters = function () { return []; };
    QuillComponent.propDecorators = {
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        autoToolbar: [{ type: Input }],
        realToolbar: [{ type: Input }],
        config: [{ type: Input }],
        modules: [{ type: Input }],
        useQuillClass: [{ type: HostBinding, args: ['class.quill',] }, { type: Input }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        valueChange: [{ type: Output }],
        editorCreate: [{ type: Output }],
        contentChange: [{ type: Output }],
        selectionChange: [{ type: Output }],
        directiveRef: [{ type: ViewChild, args: [QuillDirective,] }]
    };
    return QuillComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var QuillModule = /** @class */ (function () {
    function QuillModule() {
    }
    QuillModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [QuillComponent, QuillDirective],
                    imports: [CommonModule],
                    exports: [CommonModule, QuillComponent, QuillDirective],
                    providers: [QuillService]
                },] }
    ];
    return QuillModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { QuillComponent, QuillDirective, QUILL_CONFIG, QuillConfig, QuillModule, QuillService };
//# sourceMappingURL=ngx-quill-wrapper.es5.js.map
